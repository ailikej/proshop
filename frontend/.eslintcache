[{"/Users/ericjiang/React-learning/proshop/frontend/src/screens/RegisterScreen.js":"1","/Users/ericjiang/React-learning/proshop/frontend/src/actions/productActions.js":"2","/Users/ericjiang/React-learning/proshop/frontend/src/screens/HomeScreen.js":"3","/Users/ericjiang/React-learning/proshop/frontend/src/components/ProductCarousel.js":"4","/Users/ericjiang/React-learning/proshop/frontend/src/store.js":"5","/Users/ericjiang/React-learning/proshop/frontend/src/screens/CartScreen.js":"6","/Users/ericjiang/React-learning/proshop/frontend/src/screens/PlaceOrderScreen.js":"7","/Users/ericjiang/React-learning/proshop/frontend/src/screens/OrderListScreen.js":"8","/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProductScreen.js":"9","/Users/ericjiang/React-learning/proshop/frontend/src/components/Meta.js":"10","/Users/ericjiang/React-learning/proshop/frontend/src/index.js":"11","/Users/ericjiang/React-learning/proshop/frontend/src/screens/UserListScreen.js":"12","/Users/ericjiang/React-learning/proshop/frontend/src/reducers/orderReducers.js":"13","/Users/ericjiang/React-learning/proshop/frontend/src/reducers/productReducers.js":"14","/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProfileScreen.js":"15","/Users/ericjiang/React-learning/proshop/frontend/src/reportWebVitals.js":"16","/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProductListScreen.js":"17","/Users/ericjiang/React-learning/proshop/frontend/src/components/Header.js":"18","/Users/ericjiang/React-learning/proshop/frontend/src/components/Footer.js":"19","/Users/ericjiang/React-learning/proshop/frontend/src/reducers/cartReducers.js":"20","/Users/ericjiang/React-learning/proshop/frontend/src/screens/LoginScreen.js":"21"},{"size":3114,"mtime":1626310837542,"results":"22","hashOfConfig":"23"},{"size":6533,"mtime":1627674994768,"results":"24","hashOfConfig":"23"},{"size":1888,"mtime":1627679445173,"results":"25","hashOfConfig":"23"},{"size":1376,"mtime":1627675087302,"results":"26","hashOfConfig":"23"},{"size":2430,"mtime":1627595397643,"results":"27","hashOfConfig":"23"},{"size":6076,"mtime":1626397540384,"results":"28","hashOfConfig":"23"},{"size":7464,"mtime":1626509450372,"results":"29","hashOfConfig":"23"},{"size":3645,"mtime":1627582176382,"results":"30","hashOfConfig":"23"},{"size":11024,"mtime":1627679011634,"results":"31","hashOfConfig":"23"},{"size":526,"mtime":1627678850972,"results":"32","hashOfConfig":"23"},{"size":630,"mtime":1625005235104,"results":"33","hashOfConfig":"23"},{"size":4052,"mtime":1627430466530,"results":"34","hashOfConfig":"23"},{"size":4044,"mtime":1627582044313,"results":"35","hashOfConfig":"23"},{"size":4082,"mtime":1627623727309,"results":"36","hashOfConfig":"23"},{"size":8034,"mtime":1627001571046,"results":"37","hashOfConfig":"23"},{"size":362,"mtime":1608584469730,"results":"38","hashOfConfig":"23"},{"size":4888,"mtime":1627627791464,"results":"39","hashOfConfig":"23"},{"size":3300,"mtime":1627610803064,"results":"40","hashOfConfig":"23"},{"size":408,"mtime":1608588228706,"results":"41","hashOfConfig":"23"},{"size":1589,"mtime":1626418257395,"results":"42","hashOfConfig":"23"},{"size":2668,"mtime":1627450954115,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1bqou1k",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ericjiang/React-learning/proshop/frontend/src/screens/RegisterScreen.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/actions/productActions.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/HomeScreen.js",[],["90","91"],"/Users/ericjiang/React-learning/proshop/frontend/src/components/ProductCarousel.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/store.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/CartScreen.js",["92"],"import React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport {\n    Row,\n    Col,\n    ListGroup,\n    Image,\n    Form,\n    Button,\n    Card,\n    ListGroupItem,\n} from 'react-bootstrap'\nimport Message from '../components/Message'\nimport { addToCart, removeFromCart } from '../actions/cartActions'\n\nconst CartScreen = ({ match, location, history }) => {\n    const productId = match.params.id\n    const qty = location.search ? Number(location.search.split('=')[1]) : 1\n    const dispatch = useDispatch()\n\n    const cart = useSelector((state) => state.cart)\n    const { cartItems } = cart\n\n    useEffect(() => {\n        if (productId) {\n            dispatch(addToCart(productId, qty))\n        }\n    }, [dispatch, productId, qty])\n    const removeFromCartHandler = (id) => {\n        dispatch(removeFromCart(id))\n    }\n    const checkoutHandler = () => {\n        history.push('/login?redirect=shipping')\n    }\n    return (\n        <Row>\n            <Col md={8}>\n                <h1>Shopping Cart</h1>\n                {cartItems.length === 0 ? (\n                    <Message>\n                        Your Cart is empty <Link to='/'>Go Back</Link>\n                    </Message>\n                ) : (\n                    <ListGroup variant='flush'>\n                        {cartItems.map((item) => (\n                            <ListGroup.Item key={item.product}>\n                                <Row>\n                                    <Col md={2}>\n                                        <Image\n                                            src={item.image}\n                                            alt={item.name}\n                                            fluid\n                                            rounded\n                                        />\n                                    </Col>\n                                    <Col md={3}>\n                                        <Link to={`/product/${item.product}`}>\n                                            {item.name}\n                                        </Link>\n                                    </Col>\n                                    <Col md={2}>${item.price}</Col>\n                                    <Col md={2}>\n                                        <Form.Control\n                                            as='select'\n                                            value={item.qty}\n                                            onChange={(e) =>\n                                                dispatch(\n                                                    addToCart(\n                                                        item.product,\n                                                        Number(e.target.value)\n                                                    )\n                                                )\n                                            }\n                                        >\n                                            {[\n                                                ...Array(\n                                                    item.countInStock\n                                                ).keys(),\n                                            ].map((x) => (\n                                                <option\n                                                    key={x + 1}\n                                                    value={x + 1}\n                                                >\n                                                    {x + 1}\n                                                </option>\n                                            ))}\n                                        </Form.Control>\n                                    </Col>\n                                    <Col md={2}>\n                                        <Button\n                                            type='button'\n                                            variant='light'\n                                            onClick={() =>\n                                                removeFromCartHandler(\n                                                    item.product\n                                                )\n                                            }\n                                        >\n                                            <i className='fas fa-trash'></i>\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                )}\n            </Col>\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>\n                                Subtotal (\n                                {cartItems.reduce(\n                                    (acc, item) => acc + item.qty,\n                                    0\n                                )}\n                                ) items\n                            </h2>\n                            $\n                            {cartItems\n                                .reduce(\n                                    (acc, item) => acc + item.qty * item.price,\n                                    0\n                                )\n                                .toFixed(2)}\n                        </ListGroup.Item>\n                        <ListGroup.Item>\n                            <Button\n                                type='button'\n                                className='btn-block'\n                                disabled={cartItems.length === 0}\n                                onClick={checkoutHandler}\n                            >\n                                Proceed To Checkout\n                            </Button>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n    )\n}\n\nexport default CartScreen\n",["93","94"],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/PlaceOrderScreen.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/OrderListScreen.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProductScreen.js",["95"],"import React, { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col, Image, ListGroup, Card, Button, Form } from 'react-bootstrap'\nimport Rating from '../components/Rating'\nimport { listProductDetails, createProductReview, listTopProducts } from '../actions/productActions'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Meta from '../components/Meta'\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants'\n\nconst ProductScreen = ({ history, match }) => {\n    const [qty, setQty] = useState(1)\n    const [rating, setRating] = useState(0)\n    const [comment, setComment] = useState('')\n\n    const dispatch = useDispatch()\n\n    const productDetails = useSelector((state) => state.productDetails)\n    const { loading, error, product } = productDetails\n\n    const userLogin = useSelector((state) => state.userLogin)\n    const { userInfo } = userLogin\n\n    const productReviewCreate = useSelector((state) => state.productReviewCreate)\n    const {\n        success: successProductReview,\n        loading: loadingProductReview,\n        error: errorProductReview,\n    } = productReviewCreate\n\n    useEffect(() => {\n        if (successProductReview) {\n            alert('Review Submitted!')\n            setRating(0)\n            setComment('')\n            dispatch({ type: PRODUCT_CREATE_REVIEW_RESET })\n        }\n        // if (!product._id || product._id !== match.params.id) {\n        // }\n        dispatch(listProductDetails(match.params.id))\n    }, [dispatch, match, successProductReview])\n\n    const addToCartHandeler = () => {\n        history.push(`/cart/${match.params.id}?qty=${qty}`)\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(\n            createProductReview(match.params.id, {\n                rating,\n                comment,\n            })\n        )\n    }\n\n    return (\n        <>\n            <Link className='btn btn-light my-3' to='/'>\n                Go Back\n            </Link>\n            {loading ? (\n                <Loader />\n            ) : error ? (\n                <Message variant='danger'>{error}</Message>\n            ) : (\n                <>\n                    <Meta title={product.name}/>\n                    <Row>\n                        <Col md={6}>\n                            <Image src={product.image} alt={product.name} fluid />\n                        </Col>\n\n                        <Col md={3}>\n                            <ListGroup variant='flush'>\n                                <ListGroup.Item>\n                                    <h3>{product.name}</h3>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    <Rating\n                                        value={product.rating}\n                                        text={`${product.numReviews} reviews`}\n                                    />\n                                </ListGroup.Item>\n                                <ListGroup.Item>Price: ${product.price}</ListGroup.Item>\n                                <ListGroup.Item>Description: {product.description}</ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n\n                        <Col md={3}>\n                            <Card>\n                                <ListGroup>\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Price:</Col>\n                                            <Col>\n                                                <strong>${product.price}</strong>\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                    <ListGroup.Item>\n                                        <Row>\n                                            <Col>Status:</Col>\n                                            <Col>\n                                                {product.countInStock > 0\n                                                    ? 'In Stock'\n                                                    : 'Out Of Stock'}\n                                            </Col>\n                                        </Row>\n                                    </ListGroup.Item>\n                                    {product.countInStock > 0 && (\n                                        <ListGroup.Item>\n                                            <Row>\n                                                <Col>Qty</Col>\n                                                <Col>\n                                                    <Form.Control\n                                                        as='select'\n                                                        value={qty}\n                                                        onChange={(e) => setQty(e.target.value)}\n                                                    >\n                                                        {[\n                                                            ...Array(product.countInStock).keys(),\n                                                        ].map((x) => (\n                                                            <option key={x + 1} value={x + 1}>\n                                                                {x + 1}\n                                                            </option>\n                                                        ))}\n                                                    </Form.Control>\n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    )}\n\n                                    <ListGroup.Item>\n                                        <Button\n                                            onClick={addToCartHandeler}\n                                            className='btn-block'\n                                            type='button'\n                                            disabled={product.countInStock === 0}\n                                        >\n                                            Add To Cart\n                                        </Button>\n                                    </ListGroup.Item>\n                                </ListGroup>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col md={6}>\n                            <h2>Reviews</h2>\n                            {product.reviews.length === 0 && <Message>No Reviews</Message>}\n                            <ListGroup variant='flush'>\n                                {product.reviews.map((review) => (\n                                    <ListGroup.Item key={review._id}>\n                                        <strong>{review.name}</strong>\n                                        <Rating value={review.rating} />\n                                        <p>{review.createdAt.substring(0, 10)}</p>\n                                        <p>{review.comment}</p>\n                                    </ListGroup.Item>\n                                ))}\n                                <ListGroup.Item>\n                                    <h2>Write a Customer Review</h2>\n                                    {successProductReview && (\n                                        <Message variant='success'>\n                                            Review submitted successfully\n                                        </Message>\n                                    )}\n                                    {loadingProductReview && <Loader />}\n                                    {errorProductReview && (\n                                        <Message variant='danger'>{errorProductReview}</Message>\n                                    )}\n                                    {userInfo ? (\n                                        <Form onSubmit={submitHandler}>\n                                            <Form.Group controlId='rating'>\n                                                <Form.Label>Rating</Form.Label>\n                                                <Form.Control\n                                                    as='select'\n                                                    value={rating}\n                                                    onChange={(e) => setRating(e.target.value)}\n                                                >\n                                                    <option value=''>Select...</option>\n                                                    <option value='1'>1 - Poor</option>\n                                                    <option value='2'>2 - Fair</option>\n                                                    <option value='3'>3 - Good</option>\n                                                    <option value='4'>4 - Very Good</option>\n                                                    <option value='5'>5 - Excellent</option>\n                                                </Form.Control>\n                                            </Form.Group>\n                                            <Form.Group controlId='comment'>\n                                                <Form.Label>Comment</Form.Label>\n                                                <Form.Control\n                                                    as='textarea'\n                                                    row='3'\n                                                    value={comment}\n                                                    onChange={(e) => setComment(e.target.value)}\n                                                ></Form.Control>\n                                            </Form.Group>\n                                            <Button\n                                                disabled={loadingProductReview}\n                                                type='submit'\n                                                variant='primary'\n                                            >\n                                                Submit\n                                            </Button>\n                                        </Form>\n                                    ) : (\n                                        <Message>\n                                            Please <Link to='/login'>sign in</Link> to write a\n                                            review{' '}\n                                        </Message>\n                                    )}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Col>\n                    </Row>\n                </>\n            )}\n        </>\n    )\n}\n\nexport default ProductScreen\n","/Users/ericjiang/React-learning/proshop/frontend/src/components/Meta.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/index.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/UserListScreen.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/reducers/orderReducers.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/reducers/productReducers.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProfileScreen.js",["96"],"/Users/ericjiang/React-learning/proshop/frontend/src/reportWebVitals.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/ProductListScreen.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/components/Header.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/components/Footer.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/reducers/cartReducers.js",[],"/Users/ericjiang/React-learning/proshop/frontend/src/screens/LoginScreen.js",[],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":12,"column":5,"nodeType":"103","messageId":"104","endLine":12,"endColumn":18},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"101","severity":1,"message":"107","line":6,"column":51,"nodeType":"103","messageId":"104","endLine":6,"endColumn":66},{"ruleId":"101","severity":1,"message":"108","line":9,"column":10,"nodeType":"103","messageId":"104","endLine":9,"endColumn":35},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'ListGroupItem' is defined but never used.","Identifier","unusedVar",["109"],["110"],"'listTopProducts' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.","no-global-assign","no-unsafe-negation"]